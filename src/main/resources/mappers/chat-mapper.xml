<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "mybatis-3-mapper.dtd" >
<mapper namespace="chatMapper">

	<resultMap id="chatResult" type="Chat">
		<result column ="room_no" property="roomNo" />
		<result column ="room_name" property="roomName" />
		<result column ="notread_chat" property="notreadChat" />
		<result column ="chat_content" property="chatContent" />
		<result column ="send_date" property="sendDate" />
		<result column ="group_count" property="groupCount" />
		<result column ="send_no" property="sendNo" />
		<result column ="chat_no" property="chatNo" />
		<result column ="not_read" property="notRead" />
		<result column ="send_name" property="sendName" />
		<result column ="send_profile" property="sendProfile" />
		<collection property="memList" resultMap="memberResult" />
	</resultMap>
	
	<resultMap id="memberResult" type="Member">
		<id column="user_no" property="userNo" />
		<result column ="user_name" property="userName" />
		<result column ="position" property="position" />
		<result column ="department" property="department" />
		<result column ="phone" property="phone" />
		<result column ="mail" property="mail" />
		<result column ="profile_img" property="profileImg" />
		<result column ="conn_sta" property="connSta" />
		<result column ="chat_like" property="chatLike" />
		<result column = "room_no" property="roomNo"/>
		<result column = "lastread_chat" property="lastreadChat"/>
	</resultMap>

	<update id="updateConn">
		update
		       member
		   set conn_sta = #{connSta}
		 where user_no = #{userNo}
 	</update>
 	
 	<select id="selectListMember" resultMap="memberResult">
		select
		       user_no
		     , user_name
		     , nvl(phone, '전화번호 없음') "phone"
		     , mail
		     , position_name as "position"
		     , department_name as "department"
		     , conn_sta
		     , profile_img
		     , (select like_date
                  from chat_like
                 where myuser_no = #{userNo}
                   and likeuser_no = user_no) "chat_like"
             , (select room_no
                 from participant
                where user_no = #{userNo} 
                  and room_no in (select
                                         room_no 
                                    from participant 
                                    join chatroom using(room_no)
                                    where user_no = m.user_no
                                      and user_no != #{userNo} 
                                      and group_count = 2)) "room_no"
		  from member m
		  join dept on (m.department = dept.department_no) 
		  join position on (m.position = position.position_no)
		 where status='Y'
	</select>
	
	<insert id="insertChatLike">
		insert
		  into chat_like
		  (
		    myuser_no
		  , likeuser_no
		  )
		  values
		  (
		    #{userNo}
		  , #{chatLike}
		  )
	</insert>
	
	<delete id="deleteChatLike">
		delete
		  from chat_like
		 where myuser_no = #{userNo}
		   and likeuser_no = #{chatLike}
	</delete>
	
	<select id="searchName" resultMap="memberResult">
		select
		       user_no
		     , user_name
		     , nvl(phone, '전화번호 없음') "phone"
		     , mail
		     , position_name as "position"
		     , department_name as "department"
		     , conn_sta
		     , profile_img
		     , (select like_date
                  from chat_like
                 where myuser_no = #{userNo}
                   and likeuser_no = user_no) "chat_like"
		  from member
		  join dept on (member.department = dept.department_no) 
		  join position on (member.position = position.position_no)
		 where status='Y'
		   and user_name like '%' || #{userName} || '%'
		   and user_no != #{userNo}
	</select>
	
	<select id="selectChatRoomList" resultMap="chatResult">
		select 
		       cr.room_no
		     , room_name
		     , group_count
		     , (select notread_chat
                  from participant
                where user_no = ${participantNo}
                  and room_no = cr.room_no) "notread_chat"
		     , chat_content
		     , to_char(modify_date, 'YYYY.MM.DD PM HH:MI') "send_date"
             , user_name
             , profile_img
		  from chatroom cr
		  join participant cp on(cr.room_no = cp.room_no)
		  left join chat c on(cr.last_chat = c.chat_no)
          join member m on(m.user_no = cp.user_no)
		 where cp.room_no in (select room_no
                                      from participant
                                     where user_no = #{participantNo})
            and cp.user_no != #{participantNo}
            <if test="roomName != null">
			   	and (room_name like '%' || #{roomName} || '%'
            	 or cp.room_no in (select room_no
                            	  from participant
                                  join member using(user_no)
                                  where user_name like '%' || #{roomName} || '%'))
		   	</if>
		 order
		    by modify_date desc
	</select>
	
	<insert id="insertChatRoom" parameterType="java.util.HashMap" useGeneratedKeys="true" keyColumn="room_no" keyProperty="roomNo">
		insert 
		  into chatroom
		  (
		    room_no
		  , group_count
		  )
		  values
		  (
		    seq_chatroomno.nextval
		  , #{groupCount}
		  )
	</insert>
	
	<insert id="insertParticipant">
		<selectKey keyProperty="no" order="BEFORE" resultType="_int">
			select seq_chatroomno.currval from dual
		</selectKey>
		<foreach collection="list" item="item" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL">
		  into participant
		  (
		    room_no
		  , user_no
		  )
		  values
		  (
		    #{no}
		  , #{item}
		  )
	  	</foreach>
	</insert>
	
	<select id="selectChat" resultMap="chatResult">
		select 
		       r.room_no
		     , room_name
		     , group_count
		     , send_no
		     , chat_no
		     , chat_content
		     , not_read
		     , m.user_name "send_name"
		     , m.profile_img "send_profile"
		     , p.user_no
		     , mb.user_name
		     , mb.profile_img
		     , mb.conn_sta
		     , lastread_chat
		  from chatroom r
		  left join chat c on(r.room_no = c.room_no)
		  left join member m on(send_no = user_no)
		  join participant p on(r.room_no = p.room_no)
		  join member mb on(p.user_no = mb.user_no)
		  where r.room_no = #{roomNo}
		 order by chat_no
	</select>
	
	<insert id="insertChat" parameterType="java.util.HashMap" useGeneratedKeys="true" keyColumn="chat_no" keyProperty="chatNo">
		insert 
		  into chat
		  (
		    chat_no
		  , room_no
		  , send_no
		  , chat_content
		  , not_read
		  )
		  values
		  (
		    seq_chatno.nextval
		  , #{roomNo}
		  , #{sendNo}
		  , #{chatContent}
		  , #{notRead}
		  )
	</insert>
	
	<update id="updateChatRoom">
		update
		       chatroom
		   set last_chat = seq_chatno.currval
		     , modify_date = sysdate
		 where room_no = #{roomNo}
	</update>
	
	<update id="updateNotreadChat">
		update 
		       participant
		   set notread_chat = notread_chat + 1
		 where room_no = #{roomNo}
		   and user_no not in
		   	   <foreach item="item" index="index" collection="sessOnUser" open="(" separator="," close=")">
		   	   		#{item}
		   	   </foreach>
	</update>
	
	<update id="updateLastreadChat">
		update 
		       participant
		   set lastread_chat = seq_chatno.currval
		 where room_no = #{roomNo}
		   and user_no in
		   	   <foreach item="item" index="index" collection="sessOnUser" open="(" separator="," close=")">
		   	   		#{item}
		   	   </foreach>
	</update>
	
	<select id="selectChatRoom" resultMap="chatResult">
		select 
		       room_no
		  from chatroom
		 where room_no = #{roomNo}
	</select>
	
	<delete id="deleteParticipant">
		delete 
		  from participant
		 where room_no = #{roomNo}
	</delete>
	
	<delete id="deleteChatRoom">
		delete 
		  from chatroom
		 where room_no = #{roomNo}
	</delete>
	
	<select id="selectLastReadChat" resultType="_int">
		select lastread_chat
          from participant
         where room_no = #{roomNo}
           and user_no = #{sendNo}
	</select>
	
	<select id="selectMaxChat" resultType="_int">
		select 
		       nvl(max(chat_no), 0)
          from chat
         where chat_no in(
                select chat_no
                  from chat
                 where room_no = #{roomNo}
                   and chat_no > #{lastreadChat}
                   and send_no != #{sendNo})
	</select>
		
	<update id="updateParticipant">
		update
		       participant
		   set notread_chat = 0
		     , lastread_chat = #{chatNo}
		  where user_no = #{sendNo}
		    and room_no = #{roomNo}
	</update>
	
	<update id="updateChat">
		update 
		       chat
		   set not_read = not_read-1
		 where room_no = #{roomNo}
		   and chat_no <![CDATA[<=]]> #{chatNo}
		   and chat_no <![CDATA[>]]> #{lastreadChat}
		   and send_no != #{sendNo}
	</update>
	
	<select id="selectPartiList" resultMap="memberResult">
		select
		       m.user_no
		     , user_name
		     , nvl(phone, '전화번호 없음') "phone"
		     , mail
		     , position_name as "position"
		     , department_name as "department"
		     , conn_sta
		     , profile_img
		     , (select like_date
                  from chat_like
                 where myuser_no = #{participantNo}
                   and likeuser_no = m.user_no) "chat_like"
		  from member m
		  join dept on (m.department = dept.department_no) 
		  join position on (m.position = position.position_no)
          join participant p on(m.user_no = p.user_no)
		 where status='Y'
		   and room_no = #{roomNo}
	</select>
	
</mapper>
